import Groq from "groq-sdk"
import Anthropic from "@anthropic-ai/sdk"
import { OpenRouterClient, traceFunction } from "./langsmith-tracer.js"
import chalk from "chalk"
import dotenv from "dotenv"
dotenv.config()

// Initialize API clients
const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY,
})

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
})

const openRouter = new OpenRouterClient()

// Enhanced LLM Provider class with new order: Groq ‚Üí Qwen3 Coder ‚Üí Anthropic (Checker) ‚Üí Qwen3 (Final Fix)
export class TracedLLMProvider {
  constructor() {
    this.providers = {
      groq: groq,
      anthropic: anthropic,
      openrouter: openRouter,
    }
  }

  // Step 1: Groq provides detailed explanation and file structure
  async getGameExplanation(gamePrompt, chatId) {
    return await traceFunction(
      "Groq-Game-Explanation",
      async () => {
        console.log(chalk.green(`Getting game explanation from Groq for: ${gamePrompt}`))

        const messages = [
          {
            role: "system",
            content: `You are a senior web game developer and architect. When given a game request, provide a detailed explanation of how to build it as a modern Next.js web game.

REQUIREMENTS:
- Focus on Next.js 15+ with App Router and TypeScript
- Use either Phaser 3 for 2D games or Babylon.js for 3D games
- Implement with React components and modern hooks
- Use Tailwind CSS for styling
- Provide complete technical breakdown with proper file structure
- Consider responsive design for mobile and desktop
- Suggest specific Next.js project organization

REQUIRED FILE STRUCTURE FOR NEXT.JS GAMES:
**Base Files:**
1. **package.json** - Next.js dependencies with game engine (Phaser/Babylon.js)
2. **app/layout.tsx** - Root layout with metadata and global styles
3. **app/page.tsx** - Main game page component
4. **app/globals.css** - Tailwind CSS and custom game styles

**Game Components:**
5. **components/game.tsx** - Main game React component with canvas
6. **lib/[engine]-config.ts** - Game engine configuration (Phaser/Babylon)
7. **lib/game-manager.ts** - Core game logic and state management
8. **lib/input-manager.ts** - Input handling for keyboard, mouse, touch
9. **lib/audio-manager.ts** - Web Audio API implementation
10. **lib/utils.ts** - Utility functions and helpers
11. **types/game.ts** - TypeScript interfaces and types

FORMAT YOUR RESPONSE AS:
1. **Game Overview**: Brief description and core mechanics
2. **Technical Stack**: Next.js + Game Engine choice (Phaser vs Babylon.js)
3. **Required Files**: Detailed breakdown of each file's purpose and implementation
4. **Game Architecture**: Component structure and data flow
5. **Implementation Strategy**: Step-by-step development approach
6. **Rendering Strategy**: Canvas integration with React
7. **Responsive Design**: Mobile and desktop considerations
8. **Performance**: Optimization techniques for web games

Be detailed and comprehensive. MENTION ALL 11 REQUIRED FILES with their specific purposes in the Next.js context.`,
          },
          {
            role: "user",
            content: `Explain how to build a ${gamePrompt} as a modern Next.js web game. Provide detailed technical approach with all 11 required files and their specific roles in the game architecture.`,
          },
        ]

        const chatCompletion = await this.providers.groq.chat.completions.create({
          messages: messages,
          model: "llama-3.3-70b-versatile",
          temperature: 0.4, // Slightly higher for creative explanation
          max_tokens: 3000,
          top_p: 1,
          stream: false,
        })

        const response = chatCompletion.choices[0]?.message?.content || ""
        console.log(chalk.green(`Groq explanation: ${response.length} characters`))
        return response
      },
      {
        gamePrompt: gamePrompt,
        chatId: chatId,
      },
      { step: "game-explanation", provider: "groq" },
    )
  }

  // Step 2: Qwen3 Coder generates clean, production-ready code
  async generateCleanCodeWithQwen(groqExplanation, gamePrompt, chatId) {
    return await traceFunction(
      "Qwen3-Clean-Code-Generation",
      async () => {
        console.log(chalk.green(`Generating clean, production-ready code with Qwen3...`))

        const messages = [
          {
            role: "system",
            content: `You are an expert Next.js and game development specialist. Generate CLEAN, PRODUCTION-READY code for a complete Next.js game project.

CRITICAL REQUIREMENTS:
- Generate ONLY clean TypeScript/JavaScript and CSS code
- NO markdown code blocks, NO backticks, NO comments about generation
- NO "Generated by" comments or metadata
- Each file should be pure, clean code ready to run
- Use Next.js 15+ with App Router and TypeScript
- Implement proper React component patterns with hooks
- Use Tailwind CSS for all styling
- Include responsive design and mobile touch controls

REQUIRED FILES TO GENERATE (ALL 11):
1. package.json - Complete Next.js project with game dependencies
2. app/layout.tsx - Root layout with metadata
3. app/page.tsx - Main game page
4. app/globals.css - Tailwind CSS and custom styles
5. components/game.tsx - Main game React component
6. lib/[engine]-config.ts - Game engine configuration
7. lib/game-manager.ts - Game logic and state
8. lib/input-manager.ts - Input handling system
9. lib/audio-manager.ts - Web Audio API manager
10. lib/utils.ts - Utility functions
11. types/game.ts - TypeScript interfaces

OUTPUT FORMAT - USE EXACT SEPARATORS (NO BACKTICKS):
// === package.json ===
[clean JSON without any comments]

// === app/layout.tsx ===
[clean TypeScript React component without generation comments]

// === app/page.tsx ===
[clean TypeScript React component without generation comments]

// === app/globals.css ===
[clean CSS without generation comments]

// === components/game.tsx ===
[clean TypeScript React component without generation comments]

// === lib/[engine]-config.ts ===
[clean TypeScript configuration without generation comments]

// === lib/game-manager.ts ===
[clean TypeScript class without generation comments]

// === lib/input-manager.ts ===
[clean TypeScript class without generation comments]

// === lib/audio-manager.ts ===
[clean TypeScript class without generation comments]

// === lib/utils.ts ===
[clean TypeScript utilities without generation comments]

// === types/game.ts ===
[clean TypeScript interfaces without generation comments]

ABSOLUTELY NO:
- Markdown code blocks (\`\`\`typescript)
- Generation comments
- Metadata comments
- Backticks or quotes around code
- "Generated by" text

GENERATE ONLY CLEAN, EXECUTABLE NEXT.JS CODE.`,
          },
          {
            role: "user",
            content: `Generate clean, production-ready code for a ${gamePrompt} Next.js game based on this explanation:

${groqExplanation}

Generate ALL 11 required files with clean, executable code:
1. package.json - Complete Next.js project with game dependencies
2. app/layout.tsx - Root layout with metadata
3. app/page.tsx - Main game page
4. app/globals.css - Tailwind CSS and custom styles
5. components/game.tsx - Main game React component
6. lib/[engine]-config.ts - Game engine configuration
7. lib/game-manager.ts - Game logic and state
8. lib/input-manager.ts - Input handling system
9. lib/audio-manager.ts - Web Audio API manager
10. lib/utils.ts - Utility functions
11. types/game.ts - TypeScript interfaces

Make the code clean, professional, and immediately executable. NO generation comments or metadata.`,
          },
        ]

        const response = await this.providers.openrouter.createChatCompletion("openai/gpt-oss-20b:free", messages, {
          temperature: 0.2, // Very low for clean, consistent code
          max_tokens: 8000,
        })

        console.log(chalk.green(`Qwen3 clean code: ${response.length} characters`))
        return response
      },
      {
        gamePrompt: gamePrompt,
        groqExplanation: groqExplanation.slice(0, 300) + "...",
        chatId: chatId,
      },
      { step: "clean-code-generation", provider: "qwen3-coder" },
    )
  }

  // Step 3: Anthropic validates and provides detailed feedback (shorter response)
  async validateWithAnthropic(qwenInitialCode, gamePrompt, chatId) {
    return await traceFunction(
      "Anthropic-Code-Validation",
      async () => {
        console.log(chalk.green(`Validating code with Anthropic...`))

        const prompt = `You are a senior Next.js and game development code reviewer. Review the generated Next.js game code and provide detailed validation feedback.

GAME: ${gamePrompt}

GENERATED NEXT.JS CODE TO REVIEW:
${qwenInitialCode}

VALIDATION CHECKLIST:
1. **File Completeness**: Are all 11 required Next.js files present?
   - package.json, app/layout.tsx, app/page.tsx, app/globals.css
   - components/game.tsx, lib/[engine]-config.ts, lib/game-manager.ts
   - lib/input-manager.ts, lib/audio-manager.ts, lib/utils.ts, types/game.ts

2. **Next.js Compliance**: Check App Router usage, TypeScript, proper imports

3. **React Patterns**: Validate hooks usage, component lifecycle, refs

4. **Game Functionality**: Validate game loop, input handling, rendering

5. **TypeScript**: Check type safety, interfaces, proper typing

6. **Performance**: Check for memory leaks, proper cleanup, optimization

PROVIDE CONCISE FEEDBACK IN THIS FORMAT:

## NEXT.JS GAME VALIDATION RESULTS

### ‚úÖ COMPLETE FILES:
[List files that are properly implemented]

### ‚ùå MISSING/INCOMPLETE FILES:
[List missing or incomplete files]

### üîß CRITICAL ISSUES:
[List major problems that prevent the game from working]

### üìã REQUIRED FIXES:
[Specific instructions for Next.js and game-specific corrections]

### üéØ PRIORITY IMPROVEMENTS:
[Most important changes needed for production readiness]

Keep feedback concise but comprehensive. Focus on Next.js compliance and game functionality.`

        const response = await this.providers.anthropic.messages.create({
          model: "claude-3-haiku-20240307",
          max_tokens: 2000, // Shorter response to avoid cutoff
          temperature: 0.2, // Low temperature for precise validation
          messages: [{ role: "user", content: prompt }],
        })

        const feedback = response.content[0]?.text || ""
        console.log(chalk.green(`Anthropic validation: ${feedback.length} characters`))
        return feedback
      },
      {
        gamePrompt: gamePrompt,
        qwenInitialCode: qwenInitialCode.slice(0, 500) + "...",
        chatId: chatId,
      },
      { step: "code-validation", provider: "anthropic" },
    )
  }

  // Step 4: Qwen3 generates final fixed code based on validation feedback
  async generateFinalCodeWithQwen(anthropicFeedback, qwenInitialCode, gamePrompt, chatId) {
    return await traceFunction(
      "Qwen3-Final-Code-Generation",
      async () => {
        console.log(chalk.green(`Generating final fixed code with Qwen3...`))

        const messages = [
          {
            role: "system",
            content: `You are an expert Next.js and game development specialist. Fix and improve the generated Next.js game code based on the validation feedback provided.

YOUR TASK:
- Review the validation feedback carefully
- Fix all identified Next.js and game-specific issues
- Generate complete, working code for ALL 11 files
- Ensure the game is fully functional and ready to deploy
- Address all missing files, methods, and functionality
- Implement proper TypeScript typing and error handling
- Optimize for performance and user experience

REQUIREMENTS:
- Generate ALL 11 files with complete Next.js implementations
- Fix all TypeScript compilation errors and React issues
- Ensure proper file integration and dependencies
- Add any missing functionality identified in feedback
- Optimize for 60fps performance and responsive design
- Include proper error boundaries and loading states
- Implement complete game engine integration

OUTPUT FORMAT - USE EXACT SEPARATORS:
// === package.json ===
[complete, fixed Next.js package.json]

// === app/layout.tsx ===
[complete, fixed Next.js layout component]

// === app/page.tsx ===
[complete, fixed Next.js page component]

// === app/globals.css ===
[complete, fixed Tailwind CSS and custom styles]

// === components/game.tsx ===
[complete, fixed React game component]

// === lib/[engine]-config.ts ===
[complete, fixed game engine configuration]

// === lib/game-manager.ts ===
[complete, fixed GameManager class]

// === lib/input-manager.ts ===
[complete, fixed InputManager class]

// === lib/audio-manager.ts ===
[complete, fixed AudioManager class]

// === lib/utils.ts ===
[complete, fixed utility functions]

// === types/game.ts ===
[complete, fixed TypeScript interfaces]

CRITICAL: Address ALL issues mentioned in the validation feedback. Generate complete, working Next.js files that integrate properly and create a fully functional game ready for production deployment.`,
          },
          {
            role: "user",
            content: `Fix and improve the code for ${gamePrompt} based on this validation feedback:

VALIDATION FEEDBACK:
${anthropicFeedback}

ORIGINAL CODE TO FIX:
${qwenInitialCode}

Generate the complete, fixed code for ALL 11 files:
1. package.json - Fix Next.js project dependencies
2. app/layout.tsx - Fix layout component issues
3. app/page.tsx - Fix page component issues
4. app/globals.css - Fix Tailwind CSS and custom styles
5. components/game.tsx - Fix main game React component
6. lib/[engine]-config.ts - Fix game engine configuration
7. lib/game-manager.ts - Fix game logic and state management
8. lib/input-manager.ts - Fix input handling system
9. lib/audio-manager.ts - Fix Web Audio API manager
10. lib/utils.ts - Fix utility functions
11. types/game.ts - Fix TypeScript interfaces

Address ALL problems identified in the validation feedback. Make sure the final game is complete and fully functional.`,
          },
        ]

        const response = await this.providers.openrouter.createChatCompletion("openai/gpt-oss-20b:free", messages, {
          temperature: 0.2, // Very low temperature for precise fixes
          max_tokens: 8000, // High token limit for complete code
        })

        console.log(chalk.green(`Qwen3 final code: ${response.length} characters`))
        return response
      },
      {
        gamePrompt: gamePrompt,
        anthropicFeedback: anthropicFeedback.slice(0, 300) + "...",
        qwenInitialCode: qwenInitialCode.slice(0, 300) + "...",
        chatId: chatId,
      },
      { step: "final-code-generation", provider: "qwen3-coder" },
    )
  }

  // Complete enhanced chain with optional validation steps
  async generateWebGame(gamePrompt, chatId, skipValidation = false) {
    return await traceFunction(
      "Complete-Enhanced-Web-Game-Chain-V2",
      async () => {
        console.log(chalk.blue(`Starting enhanced web game generation chain V2 for: ${gamePrompt}`))

        if (skipValidation) {
          console.log(chalk.yellow("‚ö†Ô∏è  VALIDATION STEPS DISABLED - Using Qwen3 initial code as final"))
        }

        // Step 1: Groq explains the game and provides comprehensive architecture
        console.log(chalk.cyan("Step 1: Getting comprehensive game explanation from Groq..."))
        const groqExplanation = await this.getGameExplanation(gamePrompt, chatId)

        // Step 2: Qwen3 generates initial complete code for all files
        console.log(chalk.cyan("Step 2: Generating complete code with Qwen3 Coder..."))
        const qwenInitialCode = await this.generateCleanCodeWithQwen(groqExplanation, gamePrompt, chatId)

        let anthropicFeedback = null
        let qwenFinalCode = null

        if (!skipValidation) {
          // Step 3: Anthropic validates the code and provides detailed feedback
          console.log(chalk.cyan("Step 3: Validating code with Anthropic (concise feedback)..."))
          anthropicFeedback = await this.validateWithAnthropic(qwenInitialCode, gamePrompt, chatId)

          // Step 4: Qwen3 generates final fixed code based on validation feedback
          console.log(chalk.cyan("Step 4: Generating final fixed code with Qwen3 (complete implementation)..."))
          qwenFinalCode = await this.generateFinalCodeWithQwen(anthropicFeedback, qwenInitialCode, gamePrompt, chatId)
        } else {
          console.log(chalk.yellow("Steps 3 & 4 skipped - using Qwen3 initial code as final"))
          qwenFinalCode = qwenInitialCode
          anthropicFeedback = "Validation steps skipped by user request"
        }

        console.log(chalk.blue(`Enhanced web game chain V2 completed for: ${gamePrompt}`))

        return {
          groqExplanation,
          qwenInitialCode,
          anthropicFeedback,
          qwenFinalCode,
          webGameCode: qwenFinalCode,
          finalCode: qwenFinalCode,
          validationSkipped: skipValidation,
        }
      },
      {
        gamePrompt: gamePrompt,
        chatId: chatId,
        skipValidation: skipValidation,
      },
      { operation: "complete-enhanced-web-game-chain-v2" },
    )
  }
}

export default TracedLLMProvider
