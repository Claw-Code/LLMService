import express from "express"
import cors from "cors"
import dotenv from "dotenv"
import fs from "fs-extra"
import path from "path"
import archiver from "archiver"
import chalk from "chalk"
import { v4 as uuidv4 } from "uuid"
import TracedLLMProvider from "./lib/llm-providers.js"
import { traceFunction } from "./lib/langsmith-tracer.js"

dotenv.config()

const app = express()
const PORT = process.env.PORT || 3000

app.use(cors())
app.use(express.json())
app.use(express.static("public"))

const PROJECTS_DIR = "generated-projects"
const CHAT_HISTORY_DIR = "chat-history"

await fs.ensureDir(PROJECTS_DIR)
await fs.ensureDir(CHAT_HISTORY_DIR)

let chatCounter = 1
const conversationContexts = new Map()

// Initialize traced LLM provider
const llmProvider = new TracedLLMProvider()

// ============================================================================
// FEATURE FLAGS - Comment/uncomment to enable/disable features
// ============================================================================
const ENABLE_NEW_CHAIN = true // New flow: Groq → Mistral → Groq (Checker) → Anthropic
const ENABLE_LANGSMITH_TRACING = process.env.LANGSMITH_TRACING === "true"
const ENABLE_LIVE_PREVIEW = true // Enable live preview functionality
// ============================================================================

function parseWebGameFiles(webGameCode, chatId) {
  console.log(chalk.cyan("Parsing comprehensive web game files..."))

  const files = []

  // Comprehensive file separators for modular architecture
  const fileSeparators = [
    { pattern: /\/\/ === index\.html ===([\s\S]*?)(?=\/\/ === |$)/g, name: "index.html", type: "html" },
    { pattern: /\/\/ === gameManager\.js ===([\s\S]*?)(?=\/\/ === |$)/g, name: "gameManager.js", type: "js" },
    { pattern: /\/\/ === audioManager\.js ===([\s\S]*?)(?=\/\/ === |$)/g, name: "audioManager.js", type: "js" },
    { pattern: /\/\/ === main\.js ===([\s\S]*?)(?=\/\/ === |$)/g, name: "main.js", type: "js" },
    { pattern: /\/\/ === uiManager\.js ===([\s\S]*?)(?=\/\/ === |$)/g, name: "uiManager.js", type: "js" },
    { pattern: /\/\/ === inputManager\.js ===([\s\S]*?)(?=\/\/ === |$)/g, name: "inputManager.js", type: "js" },
    { pattern: /\/\/ === renderer\.js ===([\s\S]*?)(?=\/\/ === |$)/g, name: "renderer.js", type: "js" },
    { pattern: /\/\/ === gameObjects\.js ===([\s\S]*?)(?=\/\/ === |$)/g, name: "gameObjects.js", type: "js" },
    { pattern: /\/\/ === utils\.js ===([\s\S]*?)(?=\/\/ === |$)/g, name: "utils.js", type: "js" },
    { pattern: /\/\/ === config\.js ===([\s\S]*?)(?=\/\/ === |$)/g, name: "config.js", type: "js" },
  ]

  fileSeparators.forEach(({ pattern, name, type }) => {
    const matches = [...webGameCode.matchAll(pattern)]
    if (matches.length > 0) {
      const content = matches[0][1].trim()
      if (content) {
        files.push({
          name: name,
          content: content,
          type: type,
        })
      }
    }
  })

  // If no separators found, try to extract from code blocks and class detection
  if (files.length === 0) {
    console.log(chalk.yellow("No file separators found, attempting comprehensive class parsing..."))

    // Look for HTML content
    const htmlMatch = webGameCode.match(/<!DOCTYPE html>[\s\S]*<\/html>/i)
    if (htmlMatch) {
      files.push({
        name: "index.html",
        content: htmlMatch[0],
        type: "html",
      })
    }

    // Look for various class patterns
    const classPatterns = [
      { pattern: /class GameManager[\s\S]*?(?=class |$)/i, name: "gameManager.js" },
      { pattern: /class AudioManager[\s\S]*?(?=class |$)/i, name: "audioManager.js" },
      { pattern: /class UIManager[\s\S]*?(?=class |$)/i, name: "uiManager.js" },
      { pattern: /class InputManager[\s\S]*?(?=class |$)/i, name: "inputManager.js" },
      { pattern: /class Renderer[\s\S]*?(?=class |$)/i, name: "renderer.js" },
      { pattern: /class.*(?:Player|Enemy|Food|GameObject)[\s\S]*?(?=class |$)/i, name: "gameObjects.js" },
    ]

    classPatterns.forEach(({ pattern, name }) => {
      const match = webGameCode.match(pattern)
      if (match) {
        files.push({
          name: name,
          content: match[0].trim(),
          type: "js",
        })
      }
    })
  }

  // If still minimal files, create comprehensive default structure
  if (files.length < 6) {
    console.log(chalk.yellow("Creating comprehensive default file structure..."))

    // Ensure we have all essential files
    const essentialFiles = [
      {
        name: "index.html",
        content: `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Game - Generated by Claw</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
        }
        .game-container {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 20px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }
        .header {
            margin-bottom: 20px;
        }
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        .score {
            font-size: 1.5rem;
            font-weight: bold;
            color: #ffeb3b;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        }
        #gameCanvas {
            border: 3px solid #fff;
            border-radius: 10px;
            background: #000;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.5);
            margin-bottom: 20px;
        }
        .controls {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
        }
        .control-row {
            display: flex;
            gap: 10px;
        }
        .control-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
            width: 50px;
            height: 50px;
            border-radius: 10px;
            font-size: 1.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            user-select: none;
        }
        .control-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.1);
        }
        .game-over {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            border-radius: 10px;
        }
        .game-over-content {
            background: rgba(255, 255, 255, 0.9);
            color: #333;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }
        .restart-btn {
            background: #4caf50;
            color: white;
            border: none;
            padding: 12px 24px;
            font-size: 1.1rem;
            border-radius: 8px;
            cursor: pointer;
            transition: background 0.3s ease;
        }
        .restart-btn:hover {
            background: #45a049;
        }
        .hidden {
            display: none !important;
        }
        @media (max-width: 768px) {
            .game-container {
                padding: 15px;
                margin: 10px;
            }
            .header h1 {
                font-size: 2rem;
            }
            #gameCanvas {
                width: 300px;
                height: 300px;
            }
        }
    </style>
</head>
<body>
    <!-- Generated by Claw: Anthropic -->
    <div class="game-container">
        <div class="header">
            <h1 id="gameTitle">Web Game</h1>
            <div class="score">Score: <span id="score">0</span></div>
        </div>
        
        <div style="position: relative; display: inline-block;">
            <canvas id="gameCanvas" width="400" height="400"></canvas>
            
            <div id="gameOverScreen" class="game-over">
                <div class="game-over-content">
                    <h2>Game Over!</h2>
                    <p>Final Score: <span id="finalScore">0</span></p>
                    <button id="restartBtn" class="restart-btn">Restart Game</button>
                </div>
            </div>
        </div>
        
        <div class="controls">
            <button class="control-btn" data-direction="up">↑</button>
            <div class="control-row">
                <button class="control-btn" data-direction="left">←</button>
                <button class="control-btn" data-direction="down">↓</button>
                <button class="control-btn" data-direction="right">→</button>
            </div>
        </div>
    </div>
    
    <script src="config.js"></script>
    <script src="utils.js"></script>
    <script src="audioManager.js"></script>
    <script src="inputManager.js"></script>
    <script src="renderer.js"></script>
    <script src="gameObjects.js"></script>
    <script src="uiManager.js"></script>
    <script src="gameManager.js"></script>
    <script src="main.js"></script>
</body>
</html>`,
        type: "html",
      },
      {
        name: "config.js",
        content: `/*
 * Generated by Claw: Anthropic
 * Game Configuration and Settings
 */

const GameConfig = {
  CANVAS_WIDTH: 400,
  CANVAS_HEIGHT: 400,
  GRID_SIZE: 20,
  INITIAL_SPEED: 150,
  MIN_SPEED: 80,
  SPEED_INCREASE: 2,
  POINTS_PER_FOOD: 10,
  
  COLORS: {
    BACKGROUND: '#000000',
    SNAKE_HEAD: '#00ff00',
    SNAKE_BODY: '#009900',
    FOOD: '#ff0000',
    GRID: '#111111',
    UI_TEXT: '#ffffff'
  },
  
  AUDIO: {
    MASTER_VOLUME: 0.3,
    SFX_VOLUME: 0.5
  },
  
  INPUT: {
    KEYBOARD_ENABLED: true,
    TOUCH_ENABLED: true,
    MOUSE_ENABLED: true
  }
};

window.GameConfig = GameConfig;`,
        type: "js",
      },
    ]

    // Add essential files if they don't exist
    essentialFiles.forEach((essentialFile) => {
      if (!files.find((f) => f.name === essentialFile.name)) {
        files.push(essentialFile)
      }
    })

    // Add remaining files if not present
    const additionalFiles = [
      {
        name: "utils.js",
        content: `/*
 * Generated by Claw: Anthropic
 * Utility Functions and Helpers
 */

const Utils = {
  clamp: (value, min, max) => Math.max(min, Math.min(max, value)),
  lerp: (start, end, factor) => start + (end - start) * factor,
  distance: (x1, y1, x2, y2) => Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2),
  randomInt: (min, max) => Math.floor(Math.random() * (max - min + 1)) + min,
  randomFloat: (min, max) => Math.random() * (max - min) + min,
  randomFromArray: (array) => array[Math.floor(Math.random() * array.length)],
  getElementById: (id) => document.getElementById(id),
  addClass: (element, className) => element.classList.add(className),
  removeClass: (element, className) => element.classList.remove(className),
  toggleClass: (element, className) => element.classList.toggle(className),
  gridToPixel: (gridPos, gridSize) => gridPos * gridSize,
  pixelToGrid: (pixelPos, gridSize) => Math.floor(pixelPos / gridSize),
  isValidGridPosition: (x, y, width, height) => {
    return x >= 0 && x < width && y >= 0 && y < height;
  },
  
  debounce: (func, wait) => {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  },
  
  saveToStorage: (key, data) => {
    try {
      localStorage.setItem(key, JSON.stringify(data));
    } catch (error) {
      console.warn('Failed to save to localStorage:', error);
    }
  },
  
  loadFromStorage: (key, defaultValue = null) => {
    try {
      const data = localStorage.getItem(key);
      return data ? JSON.parse(data) : defaultValue;
    } catch (error) {
      console.warn('Failed to load from localStorage:', error);
      return defaultValue;
    }
  }
};

window.Utils = Utils;`,
        type: "js",
      },
      {
        name: "gameManager.js",
        content: webGameCode.includes("class GameManager")
          ? webGameCode
          : `/*
 * Generated by Claw: Anthropic
 * Main Game Manager - Core Game Logic
 */

class GameManager {
  constructor(canvas, audioManager, uiManager, inputManager, renderer) {
    this.canvas = canvas;
    this.ctx = canvas.getContext('2d');
    this.audioManager = audioManager;
    this.uiManager = uiManager;
    this.inputManager = inputManager;
    this.renderer = renderer;
    
    this.gameActive = true;
    this.score = 0;
    this.gameSpeed = GameConfig.INITIAL_SPEED;
    
    this.setupGame();
    this.gameLoop();
  }

  setupGame() {
    this.score = 0;
    this.gameActive = true;
    this.uiManager.updateScore(this.score);
  }

  gameLoop() {
    if (this.gameActive) {
      setTimeout(() => {
        this.update();
        this.render();
        this.gameLoop();
      }, this.gameSpeed);
    }
  }

  update() {
    const input = this.inputManager.getInput();
    // Process input and update game state
  }

  render() {
    this.renderer.clear();
    this.renderer.drawGame();
  }

  gameOver() {
    this.gameActive = false;
    this.audioManager.playGameOverSound();
    this.uiManager.showGameOver(this.score);
  }

  restart() {
    this.setupGame();
    this.gameLoop();
  }
}

window.GameManager = GameManager;`,
        type: "js",
      },
      {
        name: "audioManager.js",
        content: `/*
 * Generated by Claw: Anthropic
 * Audio Manager - Web Audio API Management
 */

class AudioManager {
  constructor() {
    this.audioContext = null;
    this.sounds = {};
    this.enabled = true;
    this.initAudio();
  }

  initAudio() {
    try {
      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
      this.createSounds();
    } catch (error) {
      console.warn('Audio not supported:', error);
      this.enabled = false;
    }
  }

  createSounds() {
    this.sounds.eat = this.createBeep(800, 0.1, "sine");
    this.sounds.gameOver = this.createBeep(200, 0.5, "sawtooth");
  }

  createBeep(frequency, duration, type = "sine") {
    return () => {
      if (!this.enabled || !this.audioContext) return;

      const oscillator = this.audioContext.createOscillator();
      const gainNode = this.audioContext.createGain();

      oscillator.connect(gainNode);
      gainNode.connect(this.audioContext.destination);

      oscillator.frequency.value = frequency;
      oscillator.type = type;

      gainNode.gain.setValueAtTime(0.3, this.audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + duration);

      oscillator.start(this.audioContext.currentTime);
      oscillator.stop(this.audioContext.currentTime + duration);
    };
  }

  playEatSound() {
    if (this.sounds.eat) {
      this.sounds.eat();
    }
  }

  playGameOverSound() {
    if (this.sounds.gameOver) {
      this.sounds.gameOver();
    }
  }

  resumeContext() {
    if (this.audioContext && this.audioContext.state === 'suspended') {
      this.audioContext.resume();
    }
  }
}

window.AudioManager = AudioManager;`,
        type: "js",
      },
      {
        name: "uiManager.js",
        content: `/*
 * Generated by Claw: Anthropic
 * UI Manager - User Interface Management
 */

class UIManager {
  constructor() {
    this.scoreElement = Utils.getElementById('score');
    this.gameOverScreen = Utils.getElementById('gameOverScreen');
    this.finalScoreElement = Utils.getElementById('finalScore');
    this.restartButton = Utils.getElementById('restartBtn');
    this.gameTitle = Utils.getElementById('gameTitle');
    
    this.setupEventListeners();
  }

  setupEventListeners() {
    if (this.restartButton) {
      this.restartButton.addEventListener('click', () => {
        this.hideGameOver();
        if (window.game) {
          window.game.restart();
        }
      });
    }
  }

  updateScore(score) {
    if (this.scoreElement) {
      this.scoreElement.textContent = score;
    }
  }

  setTitle(title) {
    if (this.gameTitle) {
      this.gameTitle.textContent = title;
    }
  }

  showGameOver(finalScore) {
    if (this.gameOverScreen && this.finalScoreElement) {
      this.finalScoreElement.textContent = finalScore;
      this.gameOverScreen.style.display = 'flex';
    }
  }

  hideGameOver() {
    if (this.gameOverScreen) {
      this.gameOverScreen.style.display = 'none';
    }
  }

  showMessage(message, duration = 3000) {
    const messageDiv = document.createElement('div');
    messageDiv.textContent = message;
    messageDiv.style.cssText = 'position: fixed; top: 20px; left: 50%; transform: translateX(-50%); background: rgba(0, 0, 0, 0.8); color: white; padding: 10px 20px; border-radius: 5px; z-index: 1000; font-size: 16px;';
    
    document.body.appendChild(messageDiv);
    
    setTimeout(() => {
      if (messageDiv.parentNode) {
        messageDiv.parentNode.removeChild(messageDiv);
      }
    }, duration);
  }
}

window.UIManager = UIManager;`,
        type: "js",
      },
      {
        name: "inputManager.js",
        content: `/*
 * Generated by Claw: Anthropic
 * Input Manager - Centralized Input Handling
 */

class InputManager {
  constructor() {
    this.keys = {};
    this.currentInput = null;
    this.lastInput = null;
    
    this.setupEventListeners();
  }

  setupEventListeners() {
    if (GameConfig.INPUT.KEYBOARD_ENABLED) {
      document.addEventListener('keydown', (e) => this.handleKeyDown(e));
      document.addEventListener('keyup', (e) => this.handleKeyUp(e));
    }

    if (GameConfig.INPUT.TOUCH_ENABLED) {
      const controlBtns = document.querySelectorAll('.control-btn');
      controlBtns.forEach(btn => {
        btn.addEventListener('click', (e) => this.handleControlButton(e));
        btn.addEventListener('touchstart', (e) => {
          e.preventDefault();
          this.handleControlButton(e);
        });
      });
    }
  }

  handleKeyDown(event) {
    const key = event.key.toLowerCase();
    this.keys[key] = true;
    
    if (key === 'w' || key === 'arrowup') {
      this.setInput('up');
    } else if (key === 's' || key === 'arrowdown') {
      this.setInput('down');
    } else if (key === 'a' || key === 'arrowleft') {
      this.setInput('left');
    } else if (key === 'd' || key === 'arrowright') {
      this.setInput('right');
    } else if (key === ' ') {
      this.setInput('space');
      event.preventDefault();
    }
  }

  handleKeyUp(event) {
    const key = event.key.toLowerCase();
    this.keys[key] = false;
  }

  handleControlButton(event) {
    const direction = event.target.dataset.direction;
    if (direction) {
      this.setInput(direction);
    }
  }

  setInput(input) {
    this.lastInput = this.currentInput;
    this.currentInput = input;
  }

  getInput() {
    const input = this.currentInput;
    this.currentInput = null;
    return input;
  }

  isKeyPressed(key) {
    return this.keys[key.toLowerCase()] || false;
  }

  getLastInput() {
    return this.lastInput;
  }

  clearInput() {
    this.currentInput = null;
    this.lastInput = null;
  }
}

window.InputManager = InputManager;`,
        type: "js",
      },
      {
        name: "renderer.js",
        content: `/*
 * Generated by Claw: Anthropic
 * Renderer - Canvas Drawing and Visual Effects
 */

class Renderer {
  constructor(canvas) {
    this.canvas = canvas;
    this.ctx = canvas.getContext('2d');
    this.width = canvas.width;
    this.height = canvas.height;
  }

  clear() {
    this.ctx.fillStyle = GameConfig.COLORS.BACKGROUND;
    this.ctx.fillRect(0, 0, this.width, this.height);
  }

  drawGrid() {
    const gridSize = GameConfig.GRID_SIZE;
    this.ctx.strokeStyle = GameConfig.COLORS.GRID;
    this.ctx.lineWidth = 1;

    for (let x = 0; x <= this.width; x += gridSize) {
      this.ctx.beginPath();
      this.ctx.moveTo(x, 0);
      this.ctx.lineTo(x, this.height);
      this.ctx.stroke();
    }

    for (let y = 0; y <= this.height; y += gridSize) {
      this.ctx.beginPath();
      this.ctx.moveTo(0, y);
      this.ctx.lineTo(this.width, y);
      this.ctx.stroke();
    }
  }

  drawRect(x, y, width, height, color) {
    this.ctx.fillStyle = color;
    this.ctx.fillRect(x, y, width, height);
  }

  drawCircle(x, y, radius, color) {
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this.ctx.arc(x, y, radius, 0, 2 * Math.PI);
    this.ctx.fill();
  }

  drawText(text, x, y, color = GameConfig.COLORS.UI_TEXT, font = '20px Arial') {
    this.ctx.fillStyle = color;
    this.ctx.font = font;
    this.ctx.textAlign = 'center';
    this.ctx.fillText(text, x, y);
  }

  drawGame() {
    this.drawGrid();
    this.drawText('Game Generated!', this.width / 2, this.height / 2);
  }

  drawParticle(x, y, size, color, alpha = 1) {
    this.ctx.save();
    this.ctx.globalAlpha = alpha;
    this.drawCircle(x, y, size, color);
    this.ctx.restore();
  }

  drawGradientRect(x, y, width, height, colorStart, colorEnd) {
    const gradient = this.ctx.createLinearGradient(x, y, x + width, y + height);
    gradient.addColorStop(0, colorStart);
    gradient.addColorStop(1, colorEnd);
    
    this.ctx.fillStyle = gradient;
    this.ctx.fillRect(x, y, width, height);
  }
}

window.Renderer = Renderer;`,
        type: "js",
      },
      {
        name: "gameObjects.js",
        content: `/*
 * Generated by Claw: Anthropic
 * Game Objects - Entity Classes and Components
 */

class GameObject {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.active = true;
  }

  update() {
    // Override in subclasses
  }

  render(renderer) {
    // Override in subclasses
  }

  destroy() {
    this.active = false;
  }
}

class Player extends GameObject {
  constructor(x, y) {
    super(x, y);
    this.width = GameConfig.GRID_SIZE;
    this.height = GameConfig.GRID_SIZE;
    this.color = GameConfig.COLORS.SNAKE_HEAD;
    this.direction = { x: 1, y: 0 };
    this.speed = 1;
  }

  update(input) {
    if (input) {
      switch (input) {
        case 'up':
          if (this.direction.y === 0) {
            this.direction = { x: 0, y: -1 };
          }
          break;
        case 'down':
          if (this.direction.y === 0) {
            this.direction = { x: 0, y: 1 };
          }
          break;
        case 'left':
          if (this.direction.x === 0) {
            this.direction = { x: -1, y: 0 };
          }
          break;
        case 'right':
          if (this.direction.x === 0) {
            this.direction = { x: 1, y: 0 };
          }
          break;
      }
    }
  }

  move() {
    this.x += this.direction.x * this.speed;
    this.y += this.direction.y * this.speed;
  }

  render(renderer) {
    const pixelX = this.x * GameConfig.GRID_SIZE;
    const pixelY = this.y * GameConfig.GRID_SIZE;
    renderer.drawRect(pixelX + 1, pixelY + 1, this.width - 2, this.height - 2, this.color);
  }
}

class Collectible extends GameObject {
  constructor(x, y) {
    super(x, y);
    this.width = GameConfig.GRID_SIZE;
    this.height = GameConfig.GRID_SIZE;
    this.color = GameConfig.COLORS.FOOD;
    this.value = GameConfig.POINTS_PER_FOOD;
    this.animationTime = 0;
  }

  update() {
    this.animationTime += 0.1;
  }

  render(renderer) {
    const pixelX = this.x * GameConfig.GRID_SIZE + GameConfig.GRID_SIZE / 2;
    const pixelY = this.y * GameConfig.GRID_SIZE + GameConfig.GRID_SIZE / 2;
    const radius = (GameConfig.GRID_SIZE / 2 - 1) + Math.sin(this.animationTime) * 2;
    renderer.drawCircle(pixelX, pixelY, radius, this.color);
  }
}

class Enemy extends GameObject {
  constructor(x, y) {
    super(x, y);
    this.width = GameConfig.GRID_SIZE;
    this.height = GameConfig.GRID_SIZE;
    this.color = '#ff4444';
    this.speed = 0.5;
    this.direction = { x: 0, y: 0 };
  }

  update() {
    this.move();
  }

  move() {
    this.x += this.direction.x * this.speed;
    this.y += this.direction.y * this.speed;
  }

  render(renderer) {
    const pixelX = this.x * GameConfig.GRID_SIZE;
    const pixelY = this.y * GameConfig.GRID_SIZE;
    renderer.drawRect(pixelX + 1, pixelY + 1, this.width - 2, this.height - 2, this.color);
  }
}

window.GameObject = GameObject;
window.Player = Player;
window.Collectible = Collectible;
window.Enemy = Enemy;`,
        type: "js",
      },
      {
        name: "main.js",
        content: `/*
 * Generated by Claw: Anthropic
 * Main Game Initialization
 */

document.addEventListener('DOMContentLoaded', () => {
  const canvas = document.getElementById('gameCanvas');
  
  if (!canvas) {
    console.error('Canvas element not found');
    return;
  }

  // Initialize all managers
  const audioManager = new AudioManager();
  const uiManager = new UIManager();
  const inputManager = new InputManager();
  const renderer = new Renderer(canvas);
  
  // Create game instance
  const game = new GameManager(canvas, audioManager, uiManager, inputManager, renderer);
  
  // Make game globally available for restart functionality
  window.game = game;

  // Make canvas responsive
  function resizeCanvas() {
    const container = canvas.parentElement;
    const maxSize = Math.min(container.clientWidth - 40, 400);
    canvas.style.width = maxSize + 'px';
    canvas.style.height = maxSize + 'px';
  }

  window.addEventListener('resize', resizeCanvas);
  resizeCanvas();

  // Resume audio context on first interaction
  document.addEventListener('click', () => {
    audioManager.resumeContext();
  }, { once: true });

  console.log('Game initialized successfully!');
});`,
        type: "js",
      },
    ]

    additionalFiles.forEach((file) => {
      if (!files.find((f) => f.name === file.name)) {
        files.push(file)
      }
    })
  }

  // Add generation info to each file
  files.forEach((file) => {
    if (file.type === "js" && !file.content.includes("Generated by Claw:")) {
      file.content = `/*
 * Generated by Claw: Anthropic
 * Chat ID: ${chatId}
 * Generated: ${new Date().toISOString()}
 */

${file.content}`
    } else if (file.type === "html" && !file.content.includes("Generated by Claw")) {
      file.content = file.content.replace(
        "<title>",
        `<!-- Generated by Claw: Anthropic | Chat ID: ${chatId} -->
    <title>`,
      )
    }
  })

  console.log(chalk.green(`Parsed ${files.length} comprehensive game files successfully`))
  return files
}

async function saveChatHistory(chatId, stage, prompt, response) {
  const chatFile = path.join(CHAT_HISTORY_DIR, `chat${chatId}.json`)
  let chatHistory = []

  if (await fs.pathExists(chatFile)) {
    chatHistory = await fs.readJson(chatFile)
  }

  chatHistory.push({
    timestamp: new Date().toISOString(),
    stage,
    prompt,
    response,
    responseLength: response.length,
  })

  await fs.writeJson(chatFile, chatHistory, { spaces: 2 })
}

async function updateConversationContext(chatId, role, content) {
  const context = conversationContexts.get(chatId) || { messages: [] }

  context.messages.push({
    role: role,
    content: content,
    timestamp: new Date().toISOString(),
  })

  if (context.messages.length > 10) {
    context.messages = context.messages.slice(-10)
  }

  conversationContexts.set(chatId, context)
  return context
}

async function createWebGameProject(gameCode, gameChain, gamePrompt, chatId) {
  return await traceFunction(
    "Web-Game-Project-Creation",
    async () => {
      const projectId = uuidv4()
      const projectName = `web-game-${Date.now()}`
      const projectDir = path.join(PROJECTS_DIR, projectId)

      console.log(chalk.magenta(`Creating web game project: ${projectName}`))

      await fs.ensureDir(projectDir)

      const gameFiles = parseWebGameFiles(gameCode, chatId)

      for (const file of gameFiles) {
        const filePath = path.join(projectDir, file.name)
        await fs.writeFile(filePath, file.content)
      }

      const packageJson = {
        name: projectName,
        version: "1.0.0",
        description: `Web game: ${gamePrompt}`,
        main: "index.html",
        scripts: {
          start: "python -m http.server 8000",
          serve: "npx serve .",
        },
        keywords: ["game", "html5", "canvas", "ai-generated"],
        author: "AI Chain: Groq → Mistral → Groq (Checker) → Anthropic",
        license: "MIT",
        metadata: {
          chatId: chatId,
          generated: new Date().toISOString(),
          aiChain: "Groq → Mistral → Groq (Checker) → Anthropic",
          langsmithTracing: ENABLE_LANGSMITH_TRACING,
        },
      }

      await fs.writeJson(path.join(projectDir, "package.json"), packageJson, { spaces: 2 })

      const readmeContent = `# ${projectName}

Professional Web Game - Generated with AI Chain

## Game Description
${gamePrompt}

## AI Generation Chain
1. **Groq (LLaMA 3.3 70B)**: Game explanation and technical architecture
2. **Mistral 7B**: Implementation plan and modular class structure
3. **Groq (LLaMA 3.3 70B)**: Implementation validation and feedback
4. **Anthropic (Claude 3 Haiku)**: Final comprehensive web game code

## Comprehensive File Structure
\`\`\`
${projectName}/
├── index.html          # Main HTML file with embedded CSS and structure
├── gameManager.js      # Core game logic, state management, game loop
├── audioManager.js     # Web Audio API management and sound effects
├── uiManager.js        # UI management, score display, menus
├── inputManager.js     # Centralized input handling (keyboard, touch, mouse)
├── renderer.js         # Canvas drawing utilities and visual effects
├── gameObjects.js      # Game entity classes (Player, Enemy, Collectible)
├── utils.js           # Utility functions and helper methods
├── config.js          # Game configuration and settings
├── main.js            # Game initialization and setup
├── package.json       # Project metadata and scripts
└── README.md          # This file
\`\`\`

## Quick Start

### Option 1: Simple File Opening
1. Open \`index.html\` directly in your web browser
2. The game should load and be playable immediately

### Option 2: Local Server (Recommended)
1. Install Node.js if not already installed
2. Run: \`npm install -g serve\`
3. Run: \`npm run serve\`
4. Open: \`http://localhost:3000\`

### Option 3: Python Server
1. Run: \`python -m http.server 8000\`
2. Run: \`http://localhost:8000\`

## Game Features
- **Modular Architecture**: Clean separation of concerns with focused classes
- **HTML5 Canvas Rendering**: Professional 2D graphics with 60fps performance
- **Responsive Design**: Mobile-first approach with touch controls
- **Web Audio API**: High-quality sound effects and music
- **Comprehensive Input**: Keyboard, mouse, and touch support
- **Visual Effects**: Particle systems, animations, and smooth rendering
- **Configuration System**: Easy customization through config.js
- **Utility Library**: Comprehensive helper functions and tools

## AI Chain Details
- **Step 1 (Groq)**: ${gameChain.groqExplanation ? "Completed" : "Failed"}
- **Step 2 (Mistral)**: ${gameChain.mistralPlan ? "Completed" : "Failed"}
- **Step 3 (Groq Checker)**: ${gameChain.groqFeedback ? "Completed" : "Failed"}
- **Step 4 (Anthropic)**: ${gameChain.webGameCode ? "Completed" : "Failed"}

## Technical Details
- **Generated**: ${new Date().toISOString()}
- **Framework**: HTML5 Canvas + Modular JavaScript Architecture
- **Performance**: Optimized for 60fps gameplay
- **Compatibility**: Modern browsers with Canvas and Web Audio support
- **Mobile Ready**: Touch controls and responsive design

Built with AI chain: Groq → Mistral → Groq (Checker) → Anthropic
`

      await fs.writeFile(path.join(projectDir, "README.md"), readmeContent)

      return { projectId, projectName, projectDir, gameFiles }
    },
    {
      gamePrompt: gamePrompt,
      chatId: chatId,
    },
    { operation: "web-game-project-creation" },
  )
}

async function createProjectZip(projectDir, projectId) {
  const zipPath = path.join(PROJECTS_DIR, `${projectId}.zip`)

  return new Promise((resolve, reject) => {
    const output = fs.createWriteStream(zipPath)
    const archive = archiver("zip", { zlib: { level: 9 } })

    output.on("close", () => {
      console.log(chalk.green(`Web game project zip created: ${archive.pointer()} bytes`))
      resolve(zipPath)
    })

    archive.on("error", reject)
    archive.pipe(output)
    archive.directory(projectDir, false)
    archive.finalize()
  })
}

// Live preview endpoint
app.get("/preview/:projectId", async (req, res) => {
  try {
    const { projectId } = req.params
    const projectDir = path.join(PROJECTS_DIR, projectId)
    const indexPath = path.join(projectDir, "index.html")

    if (!(await fs.pathExists(indexPath))) {
      return res.status(404).json({ error: "Project not found" })
    }

    const indexContent = await fs.readFile(indexPath, "utf8")
    res.setHeader("Content-Type", "text/html")
    res.send(indexContent)
  } catch (error) {
    res.status(500).json({ error: "Failed to load preview" })
  }
})

// Serve individual game files for preview
app.get("/preview/:projectId/:filename", async (req, res) => {
  try {
    const { projectId, filename } = req.params
    const projectDir = path.join(PROJECTS_DIR, projectId)
    const filePath = path.join(projectDir, filename)

    if (!(await fs.pathExists(filePath))) {
      return res.status(404).json({ error: "File not found" })
    }

    const fileContent = await fs.readFile(filePath, "utf8")

    if (filename.endsWith(".js")) {
      res.setHeader("Content-Type", "application/javascript")
    } else if (filename.endsWith(".html")) {
      res.setHeader("Content-Type", "text/html")
    } else if (filename.endsWith(".css")) {
      res.setHeader("Content-Type", "text/css")
    }

    res.send(fileContent)
  } catch (error) {
    res.status(500).json({ error: "Failed to load file" })
  }
})

// Main generation endpoint with new chain
app.post("/generate", async (req, res) => {
  const chatId = chatCounter++

  await traceFunction(
    "Web-Game-Generation-Complete",
    async () => {
      try {
        const { prompt } = req.body

        if (!prompt || !prompt.trim()) {
          return res.status(400).json({
            error: "Game description is required",
            success: false,
          })
        }

        console.log(chalk.blue(`Starting WEB GAME generation with AI chain for Chat ${chatId}`))
        console.log(chalk.blue(`Game Request: ${prompt}`))

        console.log(chalk.magenta("Feature Flags:"))
        console.log(
          chalk.magenta(`   New Chain (Groq→Mistral→Groq→Anthropic): ${ENABLE_NEW_CHAIN ? "Enabled" : "Disabled"}`),
        )
        console.log(chalk.magenta(`   LangSmith Tracing: ${ENABLE_LANGSMITH_TRACING ? "Enabled" : "Disabled"}`))
        console.log(chalk.magenta(`   Live Preview: ${ENABLE_LIVE_PREVIEW ? "Enabled" : "Disabled"}`))

        await updateConversationContext(chatId, "user", prompt)

        let gameChain, finalCode

        if (ENABLE_NEW_CHAIN) {
          console.log(chalk.cyan("Using new AI chain for web game generation..."))
          gameChain = await llmProvider.generateWebGame(prompt, chatId)
          finalCode = gameChain.webGameCode

          await saveChatHistory(chatId, "groq_explanation", prompt, gameChain.groqExplanation)
          await saveChatHistory(chatId, "mistral_plan", gameChain.groqExplanation, gameChain.mistralPlan)
          await saveChatHistory(chatId, "groq_feedback", gameChain.mistralPlan, gameChain.groqFeedback)
          await saveChatHistory(chatId, "anthropic_web_code", gameChain.groqFeedback, gameChain.webGameCode)
        } else {
          console.log(chalk.yellow("Using basic mode..."))
          finalCode = `// Basic mode - simple web game structure
const canvas = document.createElement('canvas');
document.body.appendChild(canvas);
console.log('${prompt} - Basic mode');`
          gameChain = { finalCode }
        }

        await updateConversationContext(chatId, "assistant", finalCode)

        const { projectId, projectName, projectDir, gameFiles } = await createWebGameProject(
          finalCode,
          gameChain,
          prompt,
          chatId,
        )

        const zipPath = await createProjectZip(projectDir, projectId)

        console.log(chalk.green(`WEB GAME GENERATED WITH AI CHAIN - Chat ${chatId}!`))
        console.log(chalk.green(`Project: ${projectName}`))
        console.log(chalk.green(`Files: ${gameFiles.map((f) => f.name).join(", ")}`))
        console.log(chalk.green(`Chain: Groq → Mistral → Groq (Checker) → Anthropic`))

        res.json({
          success: true,
          chatId,
          message: "Web game generated successfully with AI chain!",
          project: {
            id: projectId,
            name: projectName,
            directory: projectDir,
            files: gameFiles.map((f) => ({ name: f.name, type: f.type })),
          },
          urls: {
            download: `/download-project/${projectId}`,
            preview: ENABLE_LIVE_PREVIEW ? `/preview/${projectId}` : null,
            chatHistory: `/chat/${chatId}`,
            langsmith: ENABLE_LANGSMITH_TRACING
              ? `https://smith.langchain.com/projects/${process.env.LANGSMITH_PROJECT || "ClawCode-Unity-Generator"}`
              : null,
          },
          chain: {
            step1: "Groq - Game explanation and technical architecture",
            step2: "Mistral - Implementation plan and class structure",
            step3: "Groq - Implementation validation and feedback",
            step4: "Anthropic - Final web game code generation",
            completed: ENABLE_NEW_CHAIN,
          },
          tracing: {
            enabled: ENABLE_LANGSMITH_TRACING,
            project: process.env.LANGSMITH_PROJECT || "ClawCode-Unity-Generator",
            newChain: ENABLE_NEW_CHAIN,
          },
          preview: {
            enabled: ENABLE_LIVE_PREVIEW,
            url: ENABLE_LIVE_PREVIEW ? `/preview/${projectId}` : null,
          },
          metadata: {
            prompt,
            timestamp: new Date().toISOString(),
            architecture: "Groq → Mistral → Groq (Checker) → Anthropic → Web Game",
            framework: "HTML5 Canvas + Modern JavaScript",
            quality: "Production Ready Web Game with Modular Architecture",
            fileStructure: "index.html, gameManager.js, audioManager.js, main.js, etc.",
            featureFlags: {
              newChain: ENABLE_NEW_CHAIN,
              langsmithTracing: ENABLE_LANGSMITH_TRACING,
              livePreview: ENABLE_LIVE_PREVIEW,
            },
          },
        })
      } catch (error) {
        console.error(chalk.red(`Error in Chat ${chatId}:`, error.message))
        res.status(500).json({
          error: "Failed to generate web game",
          details: error.message,
          chatId,
          success: false,
        })
      }
    },
    {
      prompt: req.body.prompt,
      chatId: chatId,
    },
    { operation: "complete-web-game-generation" },
  )
})

// Download project endpoint
app.get("/download-project/:projectId", async (req, res) => {
  try {
    const { projectId } = req.params
    const zipPath = path.join(PROJECTS_DIR, `${projectId}.zip`)

    if (!(await fs.pathExists(zipPath))) {
      return res.status(404).json({ error: "Project not found" })
    }

    res.download(zipPath, `web-game-${projectId.slice(0, 8)}.zip`)
  } catch (error) {
    res.status(500).json({ error: "Failed to download project" })
  }
})

// Get chat history
app.get("/chat/:chatId", async (req, res) => {
  try {
    const { chatId } = req.params
    const chatFile = path.join(CHAT_HISTORY_DIR, `chat${chatId}.json`)

    if (!(await fs.pathExists(chatFile))) {
      return res.status(404).json({ error: "Chat history not found" })
    }

    const chatHistory = await fs.readJson(chatFile)
    const conversationContext = conversationContexts.get(Number.parseInt(chatId)) || { messages: [] }

    res.json({
      chatId,
      history: chatHistory,
      conversationContext: conversationContext.messages,
      chain: {
        step1: "Groq - Game explanation and technical architecture",
        step2: "Mistral - Implementation plan and class structure",
        step3: "Groq - Implementation validation and feedback",
        step4: "Anthropic - Final web game code generation",
      },
      tracing: {
        enabled: ENABLE_LANGSMITH_TRACING,
        project: process.env.LANGSMITH_PROJECT || "ClawCode-Unity-Generator",
      },
    })
  } catch (error) {
    res.status(500).json({ error: "Failed to load chat history" })
  }
})

// Health check
app.get("/health", (req, res) => {
  res.json({
    status: "healthy",
    timestamp: new Date().toISOString(),
    chatCounter: chatCounter - 1,
    activeConversations: conversationContexts.size,
    services: {
      groq: Boolean(process.env.GROQ_API_KEY),
      anthropic: Boolean(process.env.ANTHROPIC_API_KEY),
      openrouter: Boolean(process.env.OPENROUTER_API_KEY),
      langsmith: Boolean(process.env.LANGSMITH_API_KEY),
    },
    chain: {
      step1: "Groq (LLaMA 3.3 70B) - Game explanation",
      step2: "Mistral 7B - Implementation plan",
      step3: "Groq (LLaMA 3.3 70B) - Implementation validation",
      step4: "Anthropic (Claude 3 Haiku) - Web game code generation",
    },
    tracing: {
      enabled: ENABLE_LANGSMITH_TRACING,
      project: process.env.LANGSMITH_PROJECT || "ClawCode-Unity-Generator",
      endpoint: process.env.LANGSMITH_ENDPOINT || "https://api.smith.langchain.com",
    },
    framework: "HTML5 Canvas + Modern JavaScript",
    quality: "Production Ready Web Games with Modular Architecture",
    fileStructure: "index.html, gameManager.js, audioManager.js, main.js, etc.",
    featureFlags: {
      newChain: ENABLE_NEW_CHAIN,
      langsmithTracing: ENABLE_LANGSMITH_TRACING,
      livePreview: ENABLE_LIVE_PREVIEW,
    },
  })
})

// Enhanced web interface - Fixed template literal issues
app.get("/", (req, res) => {
  const htmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Game AI Generator - Groq Checker Chain</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
            min-height: 100vh;
            padding: 20px;
            color: white;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.05);
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.3);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 140, 0, 0.2);
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
        }
        
        h1 {
            color: #ff8c00;
            font-size: 3em;
            margin-bottom: 10px;
            background: linear-gradient(135deg, #ff8c00 0%, #ff6600 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-shadow: 0 0 30px rgba(255, 140, 0, 0.3);
        }
        
        .subtitle {
            color: #888;
            font-size: 1.2em;
            font-weight: 300;
        }
        
        .chain-banner {
            background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 30px;
            text-align: center;
            border: 1px solid rgba(76, 175, 80, 0.3);
        }
        
        .chain-banner h3 {
            color: white;
            margin-bottom: 10px;
            font-size: 1.5em;
        }
        
        .chain-steps {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 15px;
        }
        
        .chain-step {
            background: rgba(255, 255, 255, 0.2);
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 500;
        }
        
        .chain-arrow {
            color: #ffff00;
            font-size: 18px;
            font-weight: bold;
        }
        
        .preview-banner {
            background: linear-gradient(135deg, #9C27B0 0%, #673AB7 100%);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 30px;
            text-align: center;
            border: 1px solid rgba(156, 39, 176, 0.3);
        }
        
        .preview-banner h3 {
            color: white;
            margin-bottom: 5px;
        }
        
        .preview-banner p {
            color: rgba(255, 255, 255, 0.9);
            font-size: 14px;
        }
        
        .feature-flags {
            background: rgba(255, 165, 0, 0.1);
            border: 1px solid rgba(255, 165, 0, 0.3);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 30px;
            text-align: center;
        }
        
        .feature-flags h3 {
            color: #ffaa00;
            margin-bottom: 10px;
        }
        
        .flag-status {
            display: inline-block;
            margin: 0 8px;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 12px;
        }
        
        .flag-enabled {
            background: rgba(0, 255, 0, 0.2);
            color: #00ff88;
        }
        
        .flag-disabled {
            background: rgba(255, 0, 0, 0.2);
            color: #ff6666;
        }
        
        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }
        
        .feature {
            background: rgba(255, 140, 0, 0.1);
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            border: 1px solid rgba(255, 140, 0, 0.3);
            transition: all 0.3s ease;
        }
        
        .feature:hover {
            background: rgba(255, 140, 0, 0.2);
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(255, 140, 0, 0.2);
        }
        
        .feature-icon {
            font-size: 2em;
            margin-bottom: 10px;
        }
        
        .form-group {
            margin-bottom: 30px;
        }
        
        label {
            display: block;
            margin-bottom: 10px;
            font-weight: 600;
            color: #ff8c00;
            font-size: 1.1em;
        }
        
        textarea {
            width: 100%;
            padding: 20px;
            border: 2px solid rgba(255, 140, 0, 0.3);
            border-radius: 15px;
            font-size: 16px;
            font-family: inherit;
            resize: vertical;
            min-height: 150px;
            transition: all 0.3s ease;
            background: rgba(0, 0, 0, 0.3);
            color: white;
        }
        
        textarea:focus {
            outline: none;
            border-color: #ff8c00;
            background: rgba(0, 0, 0, 0.5);
            box-shadow: 0 0 20px rgba(255, 140, 0, 0.2);
        }
        
        button {
            background: linear-gradient(135deg, #ff8c00 0%, #ff6600 100%);
            color: white;
            padding: 20px 40px;
            border: none;
            border-radius: 15px;
            cursor: pointer;
            font-size: 18px;
            font-weight: 600;
            width: 100%;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(255, 140, 0, 0.4);
        }
        
        button:disabled {
            background: #333;
            cursor: not-allowed;
            transform: none;
        }
        
        .result {
            margin-top: 40px;
            padding: 30px;
            border-radius: 15px;
            animation: slideIn 0.5s ease;
        }
        
        @keyframes slideIn {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .success {
            background: rgba(0, 255, 0,0.1);
            border: 2px solid rgba(0, 255, 0, 0.3);
            color: #00ff88;
        }
        
        .error {
            background: rgba(255, 0, 0, 0.1);
            border: 2px solid rgba(255, 0, 0, 0.3);
            color: #ff6666;
        }
        
        .loading {
            background: rgba(255, 165, 0, 0.1);
            border: 2px solid rgba(255, 165, 0, 0.3);
            color: #ffaa00;
        }
        
        .links {
            margin-top: 20px;
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }
        
        .links a {
            display: inline-block;
            padding: 12px 24px;
            background: rgba(0, 255, 0, 0.2);
            color: #00ff88;
            text-decoration: none;
            border-radius: 10px;
            font-weight: 500;
            transition: all 0.3s ease;
            border: 1px solid rgba(0, 255, 0, 0.3);
        }
        
        .links a:hover {
            background: rgba(0, 255, 0, 0.3);
            transform: translateY(-2px);
        }
        
        .download-link {
            background: rgba(255, 140, 0, 0.2) !important;
            color: #ff8c00 !important;
            border-color: rgba(255, 140, 0, 0.3) !important;
        }
        
        .preview-link {
            background: rgba(156, 39, 176, 0.2) !important;
            color: #9C27B0 !important;
            border-color: rgba(156, 39, 176, 0.3) !important;
        }
        
        .langsmith-link {
            background: rgba(76, 175, 80, 0.2) !important;
            color: #4CAF50 !important;
            border-color: rgba(76, 175, 80, 0.3) !important;
        }
        
        .examples {
            margin-top: 30px;
            padding: 30px;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 15px;
            border-left: 5px solid #ff8c00;
        }
        
        .examples h3 {
            color: #ff8c00;
            margin-bottom: 20px;
            font-size: 1.3em;
        }
        
        .example-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 15px;
        }
        
        .example-item {
            padding: 15px;
            background: rgba(255, 140, 0, 0.1);
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 140, 0, 0.2);
        }
        
        .example-item:hover {
            background: rgba(255, 140, 0, 0.2);
            transform: translateY(-3px);
            box-shadow: 0 5px 20px rgba(255, 140, 0, 0.3);
        }
        
        .progress-bar {
            width: 100%;
            height: 6px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 3px;
            overflow: hidden;
            margin: 20px 0;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff8c00, #ff6600);
            width: 0%;
            transition: width 0.3s ease;
        }
        
        .file-structure {
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            border-left: 3px solid #ff8c00;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 20px;
                margin: 10px;
            }
            
            h1 {
                font-size: 2em;
            }
            
            .features {
                grid-template-columns: 1fr;
            }
            
            .links {
                flex-direction: column;
            }
            
            .example-grid {
                grid-template-columns: 1fr;
            }
            
            .chain-steps {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Web Game AI Generator</h1>
            <p class="subtitle">Generate production-ready web games with Groq Checker Chain + Live Preview</p>
        </div>
        
        <div class="chain-banner">
            <h3>AI Generation Chain with Groq Checker</h3>
            <p>Complete 4-step AI pipeline with validation and LangSmith tracing</p>
            <div class="chain-steps">
                <div class="chain-step">1. Groq (LLaMA 3.3 70B)</div>
                <div class="chain-arrow">→</div>
                <div class="chain-step">2. Mistral 7B</div>
                <div class="chain-arrow">→</div>
                <div class="chain-step">3. Groq Checker</div>
                <div class="chain-arrow">→</div>
                <div class="chain-step">4. Anthropic (Claude 3 Haiku)</div>
            </div>
        </div>
        
        <div class="preview-banner">
            <h3>Live Preview Ready</h3>
            <p>Generated games include instant live preview links - play immediately in your browser!</p>
        </div>
        
        <div class="feature-flags">
            <h3>Current Feature Flags</h3>
            <span class="flag-status flag-${ENABLE_NEW_CHAIN ? "enabled" : "disabled"}">
                New AI Chain: ${ENABLE_NEW_CHAIN ? "ON" : "OFF"}
            </span>
            <span class="flag-status flag-${ENABLE_LANGSMITH_TRACING ? "enabled" : "disabled"}">
                LangSmith Tracing: ${ENABLE_LANGSMITH_TRACING ? "ON" : "OFF"}
            </span>
            <span class="flag-status flag-${ENABLE_LIVE_PREVIEW ? "enabled" : "disabled"}">
                Live Preview: ${ENABLE_LIVE_PREVIEW ? "ON" : "OFF"}
            </span>
        </div>
        
        <div class="features">
            <div class="feature">
                <div class="feature-icon">🎮</div>
                <h3>HTML5 Canvas Games</h3>
                <p>Professional game architecture with modular classes</p>
            </div>
            <div class="feature">
                <div class="feature-icon">🔗</div>
                <h3>Groq Checker Chain</h3>
                <p>4-step AI generation with Groq validation</p>
            </div>
            <div class="feature">
                <div class="feature-icon">👁️</div>
                <h3>Live Preview</h3>
                <p>Instant playable games in your browser</p>
            </div>
            <div class="feature">
                <div class="feature-icon">📁</div>
                <h3>Complete File Structure</h3>
                <p>10+ modular files with proper organization</p>
            </div>
        </div>
        
        <form id="gameForm">
            <div class="form-group">
                <label for="prompt">Describe Your Web Game:</label>
                <textarea id="prompt" placeholder="Create a Snake game with HTML5 Canvas, responsive design, smooth gameplay, score system, and mobile touch controls. Include proper collision detection and increasing difficulty." required></textarea>
            </div>
            
            <button type="submit" id="generateBtn">Generate Web Game with Groq Checker Chain + Live Preview</button>
        </form>

        <div class="examples">
            <h3>Web Game Examples with Live Preview:</h3>
            <div class="example-grid">
                <div class="example-item" onclick="setPrompt('Create a Snake game with HTML5 Canvas, grid-based movement, food collection, score system, collision detection, and responsive mobile controls')">
                    <strong>Snake Game</strong><br>
                    Classic snake with modern web tech + live preview
                </div>
                <div class="example-item" onclick="setPrompt('Build a Tetris game with HTML5 Canvas, piece rotation, line clearing, increasing difficulty, score system, and responsive design for all devices')">
                    <strong>Tetris Game</strong><br>
                    Puzzle game with physics + instant preview
                </div>
                <div class="example-item" onclick="setPrompt('Design a Flappy Bird game with smooth animations, physics simulation, obstacle generation, score tracking, and touch controls for mobile')">
                    <strong>Flappy Bird Game</strong><br>
                    Physics-based flying + live gameplay
                </div>
                <div class="example-item" onclick="setPrompt('Create a Pong game with HTML5 Canvas, paddle physics, ball bouncing, AI opponent, score system, and responsive controls')">
                    <strong>Pong Game</strong><br>
                    Classic paddle game + AI opponent
                </div>
                <div class="example-item" onclick="setPrompt('Make a Pac-Man game with maze navigation, ghost AI, pellet collection, power-ups, score system, and retro styling')">
                    <strong>Pac-Man Game</strong><br>
                    Maze game with AI ghosts + preview
                </div>
                <div class="example-item" onclick="setPrompt('Build a Space Invaders game with shooting mechanics, enemy waves, power-ups, particle effects, score system, and responsive design')">
                    <strong>Space Invaders Game</strong><br>
                    Classic shooter with effects + live play
                </div>
            </div>
        </div>
        
        <div id="result"></div>
    </div>

    <script>
        function setPrompt(text) {
            document.getElementById('prompt').value = text;
            document.getElementById('prompt').focus();
        }

        document.getElementById('gameForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const prompt = document.getElementById('prompt').value;
            const generateBtn = document.getElementById('generateBtn');
            const result = document.getElementById('result');
            
            generateBtn.disabled = true;
            generateBtn.textContent = 'Generating Web Game with Groq Checker Chain...';
            
            result.innerHTML = \`
                <div class="result loading">
                    <h3>Creating Your Web Game with Groq Checker Chain + Live Preview...</h3>
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressFill"></div>
                    </div>
                    <p id="statusText">Initializing AI chain generation...</p>
                    <ul style="margin-top: 20px; text-align: left;">
                        <li>Starting LangSmith tracing session</li>
                        <li>Step 1: Groq explains game mechanics and architecture</li>
                        <li>Step 2: Mistral creates implementation plan and class structure</li>
                        <li>Step 3: Groq validates implementation and provides feedback</li>
                        <li>Step 4: Anthropic generates final web game code with all files</li>
                        <li>Creating comprehensive modular file structure</li>
                        <li>Setting up live preview functionality</li>
                        <li>Finalizing LangSmith observability data</li>
                    </ul>
                </div>
            \`;
            
            let progress = 0;
            const progressInterval = setInterval(() => {
                progress += Math.random() * 8;
                if (progress > 90) progress = 90;
                document.getElementById('progressFill').style.width = progress + '%';
                
                if (progress < 15) {
                    document.getElementById('statusText').textContent = 'Starting LangSmith tracing session...';
                } else if (progress < 30) {
                    document.getElementById('statusText').textContent = 'Step 1: Groq explaining game architecture...';
                } else if (progress < 45) {
                    document.getElementById('statusText').textContent = 'Step 2: Mistral creating class structure...';
                } else if (progress < 60) {
                    document.getElementById('statusText').textContent = 'Step 3: Groq validating implementation...';
                } else if (progress < 75) {
                    document.getElementById('statusText').textContent = 'Step 4: Anthropic generating complete game code...';
                } else if (progress < 85) {
                    document.getElementById('statusText').textContent = 'Creating comprehensive file structure...';
                } else {
                    document.getElementById('statusText').textContent = 'Setting up live preview functionality...';
                }
            }, 600);
            
            try {
                const response = await fetch('/generate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ prompt }),
                });
                
                const data = await response.json();
                clearInterval(progressInterval);
                
                if (data.success) {
                    document.getElementById('progressFill').style.width = '100%';
                    
                    setTimeout(() => {
                        result.innerHTML = \`
                            <div class="result success">
                                <h3>Web Game Generated Successfully with Groq Checker Chain + Live Preview!</h3>
                                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0;">
                                    <div>
                                        <strong>Chat ID:</strong> \${data.chatId}<br>
                                        <strong>Project:</strong> \${data.project.name}<br>
                                        <strong>Framework:</strong> \${data.metadata.framework}
                                    </div>
                                    <div>
                                        <strong>AI Chain:</strong> \${data.chain.completed ? 'Completed' : 'Partial'}<br>
                                        <strong>Live Preview:</strong> \${data.preview.enabled ? 'Ready' : 'Disabled'}<br>
                                        <strong>Tracing:</strong> \${data.tracing.enabled ? 'LangSmith Enabled' : 'Disabled'}
                                    </div>
                                </div>
                                
                                <div class="file-structure">
                                    <strong>Generated File Structure:</strong><br>
                                    \${data.project.files ? data.project.files.map(f => \`• \${f.name} (\${f.type})\`).join('<br>') : 'Standard web game files'}
                                </div>
                                
                                <div style="background: rgba(76, 175, 80, 0.1); padding: 15px; border-radius: 10px; margin: 20px 0;">
                                    <h4 style="color: #4CAF50; margin-bottom: 10px;">Groq Checker Chain Steps Completed:</h4>
                                    <div style="font-size: 14px;">
                                        <div>✅ \${data.chain.step1}</div>
                                        <div>✅ \${data.chain.step2}</div>
                                        <div>✅ \${data.chain.step3}</div>
                                        <div>✅ \${data.chain.step4}</div>
                                    </div>
                                </div>
                                
                                <div class="links">
                                    \${data.urls.preview ? \`<a href="\${data.urls.preview}" target="_blank" class="preview-link">Play Live Preview</a>\` : ''}
                                    <a href="\${data.urls.download}" download class="download-link">Download Project</a>
                                    <a href="\${data.urls.chatHistory}" target="_blank">View Chain History</a>
                                    \${data.urls.langsmith ? \`<a href="\${data.urls.langsmith}" target="_blank" class="langsmith-link">View LangSmith Traces</a>\` : ''}
                                </div>
                                <div style="margin-top: 20px; padding: 15px; background: rgba(0,0,0,0.2); border-radius: 10px; font-size: 14px;">
                                    <strong>Web Game Features:</strong><br>
                                    • HTML5 Canvas with 60fps rendering<br>
                                    • Comprehensive modular JavaScript architecture<br>
                                    • Complete file structure with 10+ files<br>
                                    • GameManager.js for core game logic<br>
                                    • AudioManager.js for Web Audio API sounds<br>
                                    • UIManager.js for interface management<br>
                                    • InputManager.js for centralized input handling<br>
                                    • Renderer.js for canvas drawing utilities<br>
                                    • GameObjects.js for entity classes<br>
                                    • Utils.js and Config.js for helpers and settings<br>
                                    • main.js for proper initialization<br>
                                    • index.html with complete responsive design<br>
                                    • Touch controls + keyboard input<br>
                                    • Live preview ready - play instantly!<br>
                                    • Complete Groq Checker Chain: Groq → Mistral → Groq → Anthropic<br>
                                    • Full LangSmith tracing and observability<br><br>
                                    <strong>Quick Start:</strong><br>
                                    1. Click "Play Live Preview" to play immediately<br>
                                    2. Download project for local development<br>
                                    3. Open index.html in any modern browser<br>
                                    4. Customize code in separate modular files<br><br>
                                    <strong>Feature Flags Used:</strong><br>
                                    • New AI Chain: \${data.metadata.featureFlags?.newChain ? 'Enabled' : 'Disabled'}<br>
                                    • LangSmith Tracing: \${data.metadata.featureFlags?.langsmithTracing ? 'Enabled' : 'Disabled'}<br>
                                    • Live Preview: \${data.metadata.featureFlags?.livePreview ? 'Enabled' : 'Disabled'}
                                </div>
                            </div>
                        \`;
                    }, 500);
                } else {
                    result.innerHTML = \`
                        <div class="result error">
                            <h3>Generation Failed</h3>
                            <p>\${data.error}</p>
                            <p><strong>Chat ID:</strong> \${data.chatId || 'N/A'}</p>
                            <p>Please try again with a different web game description.</p>
                        </div>
                    \`;
                }
            } catch (error) {
                clearInterval(progressInterval);
                result.innerHTML = \`
                    <div class="result error">
                        <h3>Network Error</h3>
                        <p>\${error.message}</p>
                        <p>Please check your connection and try again.</p>
                    </div>
                \`;
            }

            generateBtn.disabled = false;
            generateBtn.textContent = 'Generate Web Game with Groq Checker Chain + Live Preview';
        });
    </script>
</body>
</html>`;

  res.send(htmlContent);
});

function checkEnvironment() {
    const required = ['GROQ_API_KEY', 'ANTHROPIC_API_KEY', 'OPENROUTER_API_KEY'];
    const optional = ['LANGSMITH_API_KEY'];

    const missing = required.filter(key => !process.env[key]);
    const missingOptional = optional.filter(key => !process.env[key]);

    if (missing.length > 0) {
        console.error(chalk.red('Missing required environment variables:'));
        missing.forEach(key => console.error(chalk.red(`   - ${key}`)));
        console.error(chalk.red('Please set these environment variables and try again.'));
        process.exit(1);
    }

    if (missingOptional.length > 0) {
        console.log(chalk.yellow('Missing optional environment variables:'));
        missingOptional.forEach(key => console.log(chalk.yellow(`   - ${key} (LangSmith tracing will be disabled)`)));
    }
}

process.on('SIGINT', () => {
    console.log(chalk.yellow('Shutting down Web Game AI Generator...'));
    console.log(chalk.green('Web Game AI Generator stopped. Goodbye!'));
    process.exit(0);
});

checkEnvironment();
app.listen(PORT, () => {
    console.log(chalk.green(`Web Game AI Generator with Groq Checker Chain + Live Preview running on http://localhost:${PORT}`));
    console.log(chalk.blue(`Web Interface: http://localhost:${PORT}`));
    console.log(chalk.blue(`API Endpoint: POST http://localhost:${PORT}/generate`));
    console.log(chalk.blue(`Live Preview: GET http://localhost:${PORT}/preview/:projectId`));
    console.log(chalk.blue(`Health Check: http://localhost:${PORT}/health`));
    console.log(chalk.yellow(`Projects Directory: ${PROJECTS_DIR}`));
    console.log(chalk.yellow(`Chat History: ${CHAT_HISTORY_DIR}`));
    console.log(chalk.magenta(`Framework: HTML5 Canvas + Modern JavaScript`));
    console.log(chalk.magenta(`File Structure: Comprehensive 10+ file modular architecture`));
    console.log(chalk.magenta(`Quality Level: Production-Ready Web Games with Complete Asset Structure`));
    console.log(chalk.green(`LangSmith Integration: ${ENABLE_LANGSMITH_TRACING ? 'Enabled' : 'Disabled'}`));
    console.log(chalk.green(`LangSmith Project: ${process.env.LANGSMITH_PROJECT || 'ClawCode-Unity-Generator'}`));
    console.log(chalk.green(`Live Preview: ${ENABLE_LIVE_PREVIEW ? 'Enabled' : 'Disabled'}`));
    console.log(chalk.cyan(`AI Generation Chain:`));
    console.log(chalk.cyan(`   Step 1: Groq (LLaMA 3.3 70B) - Game explanation and technical architecture`));
    console.log(chalk.cyan(`   Step 2: Mistral 7B - Implementation plan and modular class structure`));
    console.log(chalk.cyan(`   Step 3: Groq (LLaMA 3.3 70B) - Implementation validation and feedback`));
    console.log(chalk.cyan(`   Step 4: Anthropic (Claude 3 Haiku) - Final comprehensive web game code`));
    console.log(chalk.cyan(`Feature Flags:`));
    console.log(chalk.cyan(`   New AI Chain: ${ENABLE_NEW_CHAIN ? 'Enabled' : 'Disabled'}`));
    console.log(chalk.cyan(`   LangSmith Tracing: ${ENABLE_LANGSMITH_TRACING ? 'Enabled' : 'Disabled'}`));
    console.log(chalk.cyan(`   Live Preview: ${ENABLE_LIVE_PREVIEW ? 'Enabled' : 'Disabled'}`));
});
